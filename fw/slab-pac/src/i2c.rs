# [repr (C)] # [doc = "Register block"] pub struct RegisterBlock { tx_data : TxData , tx_ack : TxAck , rx_data : RxData , rx_ack : RxAck , _reserved4 : [u8 ; 0x18] , sampling_clock_divider : SamplingClockDivider , timeout : Timeout , tsu_data : TsuData , _reserved7 : [u8 ; 0x0c] , master_status : MasterStatus , _reserved8 : [u8 ; 0x0c] , t_low : TLow , t_high : THigh , t_buf : TBuf , } impl RegisterBlock { # [doc = "0x00 - I2C transmit data"] # [inline (always)] pub const fn tx_data (& self) -> & TxData { & self . tx_data } # [doc = "0x04 - I2C transmit acknowledge"] # [inline (always)] pub const fn tx_ack (& self) -> & TxAck { & self . tx_ack } # [doc = "0x08 - I2C receive data"] # [inline (always)] pub const fn rx_data (& self) -> & RxData { & self . rx_data } # [doc = "0x0c - I2C receive acknowledge"] # [inline (always)] pub const fn rx_ack (& self) -> & RxAck { & self . rx_ack } # [doc = "0x28 - I2C sampling clock divider"] # [inline (always)] pub const fn sampling_clock_divider (& self) -> & SamplingClockDivider { & self . sampling_clock_divider } # [doc = "0x2c - I2C timeout"] # [inline (always)] pub const fn timeout (& self) -> & Timeout { & self . timeout } # [doc = "0x30 - I2C transmit data setup time"] # [inline (always)] pub const fn tsu_data (& self) -> & TsuData { & self . tsu_data } # [doc = "0x40 - I2C master status"] # [inline (always)] pub const fn master_status (& self) -> & MasterStatus { & self . master_status } # [doc = "0x50 - I2C transmit time low"] # [inline (always)] pub const fn t_low (& self) -> & TLow { & self . t_low } # [doc = "0x54 - I2C transmit time high"] # [inline (always)] pub const fn t_high (& self) -> & THigh { & self . t_high } # [doc = "0x58 - I2C transmit idle time"] # [inline (always)] pub const fn t_buf (& self) -> & TBuf { & self . t_buf } } # [doc = "txData (rw) register accessor: I2C transmit data\n\nYou can [`read`](crate::Reg::read) this register and get [`tx_data::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`tx_data::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@tx_data`]
module"] # [doc (alias = "txData")] pub type TxData = crate :: Reg < tx_data :: TxDataSpec > ; # [doc = "I2C transmit data"] pub mod tx_data ; # [doc = "txAck (rw) register accessor: I2C transmit acknowledge\n\nYou can [`read`](crate::Reg::read) this register and get [`tx_ack::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`tx_ack::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@tx_ack`]
module"] # [doc (alias = "txAck")] pub type TxAck = crate :: Reg < tx_ack :: TxAckSpec > ; # [doc = "I2C transmit acknowledge"] pub mod tx_ack ; # [doc = "rxData (rw) register accessor: I2C receive data\n\nYou can [`read`](crate::Reg::read) this register and get [`rx_data::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`rx_data::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@rx_data`]
module"] # [doc (alias = "rxData")] pub type RxData = crate :: Reg < rx_data :: RxDataSpec > ; # [doc = "I2C receive data"] pub mod rx_data ; # [doc = "rxAck (rw) register accessor: I2C receive acknowledge\n\nYou can [`read`](crate::Reg::read) this register and get [`rx_ack::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`rx_ack::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@rx_ack`]
module"] # [doc (alias = "rxAck")] pub type RxAck = crate :: Reg < rx_ack :: RxAckSpec > ; # [doc = "I2C receive acknowledge"] pub mod rx_ack ; # [doc = "samplingClockDivider (w) register accessor: I2C sampling clock divider\n\nYou can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`sampling_clock_divider::W`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@sampling_clock_divider`]
module"] # [doc (alias = "samplingClockDivider")] pub type SamplingClockDivider = crate :: Reg < sampling_clock_divider :: SamplingClockDividerSpec > ; # [doc = "I2C sampling clock divider"] pub mod sampling_clock_divider ; # [doc = "timeout (w) register accessor: I2C timeout\n\nYou can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`timeout::W`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@timeout`]
module"] # [doc (alias = "timeout")] pub type Timeout = crate :: Reg < timeout :: TimeoutSpec > ; # [doc = "I2C timeout"] pub mod timeout ; # [doc = "tsuData (w) register accessor: I2C transmit data setup time\n\nYou can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`tsu_data::W`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@tsu_data`]
module"] # [doc (alias = "tsuData")] pub type TsuData = crate :: Reg < tsu_data :: TsuDataSpec > ; # [doc = "I2C transmit data setup time"] pub mod tsu_data ; # [doc = "masterStatus (rw) register accessor: I2C master status\n\nYou can [`read`](crate::Reg::read) this register and get [`master_status::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`master_status::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@master_status`]
module"] # [doc (alias = "masterStatus")] pub type MasterStatus = crate :: Reg < master_status :: MasterStatusSpec > ; # [doc = "I2C master status"] pub mod master_status ; # [doc = "tLow (w) register accessor: I2C transmit time low\n\nYou can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`t_low::W`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@t_low`]
module"] # [doc (alias = "tLow")] pub type TLow = crate :: Reg < t_low :: TLowSpec > ; # [doc = "I2C transmit time low"] pub mod t_low ; # [doc = "tHigh (w) register accessor: I2C transmit time high\n\nYou can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`t_high::W`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@t_high`]
module"] # [doc (alias = "tHigh")] pub type THigh = crate :: Reg < t_high :: THighSpec > ; # [doc = "I2C transmit time high"] pub mod t_high ; # [doc = "tBuf (w) register accessor: I2C transmit idle time\n\nYou can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`t_buf::W`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@t_buf`]
module"] # [doc (alias = "tBuf")] pub type TBuf = crate :: Reg < t_buf :: TBufSpec > ; # [doc = "I2C transmit idle time"] pub mod t_buf ;