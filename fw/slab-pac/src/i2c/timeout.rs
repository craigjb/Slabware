# [doc = "Register `timeout` writer"] pub type W = crate :: W < TimeoutSpec > ; # [doc = "Field `value` writer - Timeout clock cycles"] pub type ValueW < 'a , REG > = crate :: FieldWriter < 'a , REG , 20 , u32 > ; impl W { # [doc = "Bits 0:19 - Timeout clock cycles"] # [inline (always)] # [must_use] pub fn value (& mut self) -> ValueW < TimeoutSpec > { ValueW :: new (self , 0) } } # [doc = "I2C timeout\n\nYou can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`timeout::W`](W). See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct TimeoutSpec ; impl crate :: RegisterSpec for TimeoutSpec { type Ux = u32 ; } # [doc = "`write(|w| ..)` method takes [`timeout::W`](W) writer structure"] impl crate :: Writable for TimeoutSpec { type Safety = crate :: Unsafe ; const ZERO_TO_MODIFY_FIELDS_BITMAP : u32 = 0 ; const ONE_TO_MODIFY_FIELDS_BITMAP : u32 = 0 ; } # [doc = "`reset()` method sets timeout to value 0"] impl crate :: Resettable for TimeoutSpec { const RESET_VALUE : u32 = 0 ; }