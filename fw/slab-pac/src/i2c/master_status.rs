# [doc = "Register `masterStatus` reader"] pub type R = crate :: R < MasterStatusSpec > ; # [doc = "Register `masterStatus` writer"] pub type W = crate :: W < MasterStatusSpec > ; # [doc = "Field `isBusy` reader - I2C master is busy"] pub type IsBusyR = crate :: BitReader ; # [doc = "Field `start` reader - Order an I2C master start"] pub type StartR = crate :: BitReader ; # [doc = "Field `start` writer - Order an I2C master start"] pub type StartW < 'a , REG > = crate :: BitWriter < 'a , REG > ; # [doc = "Field `stop` reader - Order an I2C master stop"] pub type StopR = crate :: BitReader ; # [doc = "Field `stop` writer - Order an I2C master stop"] pub type StopW < 'a , REG > = crate :: BitWriter < 'a , REG > ; # [doc = "Field `drop` reader - Order an I2C master drop"] pub type DropR = crate :: BitReader ; # [doc = "Field `drop` writer - Order an I2C master drop"] pub type DropW < 'a , REG > = crate :: BitWriter < 'a , REG > ; # [doc = "Field `recover` reader - Order an I2C master recover"] pub type RecoverR = crate :: BitReader ; # [doc = "Field `recover` writer - Order an I2C master recover"] pub type RecoverW < 'a , REG > = crate :: BitWriter < 'a , REG > ; # [doc = "Field `startDropped` reader - I2C timed out during start (cleared on set)"] pub type StartDroppedR = crate :: BitReader ; # [doc = "Field `startDropped` writer - I2C timed out during start (cleared on set)"] pub type StartDroppedW < 'a , REG > = crate :: BitWriter1C < 'a , REG > ; # [doc = "Field `stopDropped` reader - I2C timed out during stop (cleared on set)"] pub type StopDroppedR = crate :: BitReader ; # [doc = "Field `stopDropped` writer - I2C timed out during stop (cleared on set)"] pub type StopDroppedW < 'a , REG > = crate :: BitWriter1C < 'a , REG > ; # [doc = "Field `recoverDropped` reader - I2C timed out during recover (cleared on set)"] pub type RecoverDroppedR = crate :: BitReader ; # [doc = "Field `recoverDropped` writer - I2C timed out during recover (cleared on set)"] pub type RecoverDroppedW < 'a , REG > = crate :: BitWriter1C < 'a , REG > ; impl R { # [doc = "Bit 0 - I2C master is busy"] # [inline (always)] pub fn is_busy (& self) -> IsBusyR { IsBusyR :: new ((self . bits & 1) != 0) } # [doc = "Bit 4 - Order an I2C master start"] # [inline (always)] pub fn start (& self) -> StartR { StartR :: new (((self . bits >> 4) & 1) != 0) } # [doc = "Bit 5 - Order an I2C master stop"] # [inline (always)] pub fn stop (& self) -> StopR { StopR :: new (((self . bits >> 5) & 1) != 0) } # [doc = "Bit 6 - Order an I2C master drop"] # [inline (always)] pub fn drop (& self) -> DropR { DropR :: new (((self . bits >> 6) & 1) != 0) } # [doc = "Bit 7 - Order an I2C master recover"] # [inline (always)] pub fn recover (& self) -> RecoverR { RecoverR :: new (((self . bits >> 7) & 1) != 0) } # [doc = "Bit 9 - I2C timed out during start (cleared on set)"] # [inline (always)] pub fn start_dropped (& self) -> StartDroppedR { StartDroppedR :: new (((self . bits >> 9) & 1) != 0) } # [doc = "Bit 10 - I2C timed out during stop (cleared on set)"] # [inline (always)] pub fn stop_dropped (& self) -> StopDroppedR { StopDroppedR :: new (((self . bits >> 10) & 1) != 0) } # [doc = "Bit 11 - I2C timed out during recover (cleared on set)"] # [inline (always)] pub fn recover_dropped (& self) -> RecoverDroppedR { RecoverDroppedR :: new (((self . bits >> 11) & 1) != 0) } } impl W { # [doc = "Bit 4 - Order an I2C master start"] # [inline (always)] # [must_use] pub fn start (& mut self) -> StartW < MasterStatusSpec > { StartW :: new (self , 4) } # [doc = "Bit 5 - Order an I2C master stop"] # [inline (always)] # [must_use] pub fn stop (& mut self) -> StopW < MasterStatusSpec > { StopW :: new (self , 5) } # [doc = "Bit 6 - Order an I2C master drop"] # [inline (always)] # [must_use] pub fn drop (& mut self) -> DropW < MasterStatusSpec > { DropW :: new (self , 6) } # [doc = "Bit 7 - Order an I2C master recover"] # [inline (always)] # [must_use] pub fn recover (& mut self) -> RecoverW < MasterStatusSpec > { RecoverW :: new (self , 7) } # [doc = "Bit 9 - I2C timed out during start (cleared on set)"] # [inline (always)] # [must_use] pub fn start_dropped (& mut self) -> StartDroppedW < MasterStatusSpec > { StartDroppedW :: new (self , 9) } # [doc = "Bit 10 - I2C timed out during stop (cleared on set)"] # [inline (always)] # [must_use] pub fn stop_dropped (& mut self) -> StopDroppedW < MasterStatusSpec > { StopDroppedW :: new (self , 10) } # [doc = "Bit 11 - I2C timed out during recover (cleared on set)"] # [inline (always)] # [must_use] pub fn recover_dropped (& mut self) -> RecoverDroppedW < MasterStatusSpec > { RecoverDroppedW :: new (self , 11) } } # [doc = "I2C master status\n\nYou can [`read`](crate::Reg::read) this register and get [`master_status::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`master_status::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct MasterStatusSpec ; impl crate :: RegisterSpec for MasterStatusSpec { type Ux = u32 ; } # [doc = "`read()` method returns [`master_status::R`](R) reader structure"] impl crate :: Readable for MasterStatusSpec { } # [doc = "`write(|w| ..)` method takes [`master_status::W`](W) writer structure"] impl crate :: Writable for MasterStatusSpec { type Safety = crate :: Unsafe ; const ZERO_TO_MODIFY_FIELDS_BITMAP : u32 = 0 ; const ONE_TO_MODIFY_FIELDS_BITMAP : u32 = 0x0e00 ; } # [doc = "`reset()` method sets masterStatus to value 0"] impl crate :: Resettable for MasterStatusSpec { const RESET_VALUE : u32 = 0 ; }